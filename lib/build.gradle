/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.10/userguide/building_java_projects.html in the Gradle documentation.
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    // Apply the java-library plugin for API and implementation separation.
    id 'java-library'
    id 'signing'
    id 'maven-publish'
    id 'com.diffplug.spotless' version '7.0.3'
}

dependencies {
    // api dependency is exported to consumers, that is to say found on their compile classpath.
    // implementation dependency is used internally, and not exposed to consumers on their own compile classpath.
    api 'com.fasterxml.jackson.core:jackson-databind:2.19.0'
    api 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.19.0'

    implementation 'com.squareup.okhttp3:okhttp:4.12.0'
    implementation 'com.mailjet:mailjet-client:5.2.6'

    implementation 'org.slf4j:slf4j-api:2.0.17'
    implementation 'ch.qos.logback:logback-classic:1.5.18'

    testImplementation 'org.junit.platform:junit-platform-launcher:1.12.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.12.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.12.2'
    testImplementation 'org.mockito:mockito-core:5.17.0'
    testImplementation 'com.squareup.okhttp3:mockwebserver:4.12.0'
}

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

repositories {
    mavenCentral()
}

test {
    useJUnitPlatform { options ->
        options.includeEngines 'junit-jupiter'
        options.excludeEngines 'junit-vintage'
    }
}

spotless {
    java {
        removeUnusedImports()
        googleJavaFormat()
    }
}

// for publishing
// currently this is a manual process, figure out automating later
// Generate the application JAR (default behavior of the 'java' plugin)
// Set the base name and version for the project
archivesBaseName = 'shdsvc'
version = '1.0.1'

jar {
    archiveClassifier = ''
    archiveFileName = "${archivesBaseName}-${version}.jar"
}

// Generate the sources JAR
tasks.register('sourcesJar', Jar) {
    archiveClassifier = 'sources'
    archiveFileName = "${archivesBaseName}-${version}-sources.jar"
    from sourceSets.main.allSource
}

// Generate the Javadoc JAR
tasks.register('javadocJar', Jar) {
    archiveClassifier = 'javadoc'
    archiveFileName = "${archivesBaseName}-${version}-javadoc.jar"
    from javadoc.destinationDir
}

// Ensure the Javadoc task runs before creating the Javadoc JAR
javadocJar.dependsOn javadoc

// Generate checksums for all artifacts
tasks.withType(AbstractArchiveTask).configureEach { task ->
    task.outputs.files(task.archiveFile) // Ensure the task outputs the archive file
    task.doLast {
        def archiveFile = task.archiveFile.get().asFile
        ant.checksum(file: archiveFile, algorithm: 'MD5', fileext: '.md5')
        ant.checksum(file: archiveFile, algorithm: 'SHA1', fileext: '.sha1')
    }
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

signing {
    sign configurations.archives
}

publishing {
    publications {
        mavenPublication(MavenPublication) {
            groupId = 'io.github.bibekaryal86'
            artifactId = 'shdsvc'
            from components.java

            pom {
                name = 'Shared Service'
                description = 'This will be the common module shared across repositories with shared services'
                url = 'https://github.com/bibekaryal86/shared-service'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'bibekaryal86'
                        name = 'Bibek Aryal'
                        email = 'bibekaryal86@gmail.com'
                    }
                }
                scm {
                    url = 'https://github.com/bibekaryal86/shared-service'
                    connection = 'scm:git:git://github.com/bibekaryal86/shared-service.git'
                    developerConnection = 'scm:git:ssh://git@github.com/bibekaryal86/shared-service.git'
                }
            }
        }
    }
}

// Task to copy and rename the POM file
tasks.register('copyAndRenamePom') {
    doLast {
        def pomFile = file("${projectDir}/build/publications/mavenPublication/pom-default.xml")
        def destinationFile = file("${projectDir}/build/libs/${archivesBaseName}-${version}.pom")
        copy {
            from pomFile
            into destinationFile.parent
            rename { destinationFile.name }
        }

    }
    finalizedBy signAndChecksumPom
}

// Task to generate checksums and signatures for the POM file
tasks.register('signAndChecksumPom') {
    doLast {
        def pomFile = file("${projectDir}/build/libs/${archivesBaseName}-${version}.pom")

        // Generate .md5 and .sha1 checksums
        ant.checksum(file: pomFile, algorithm: 'MD5', fileext: '.md5')
        ant.checksum(file: pomFile, algorithm: 'SHA1', fileext: '.sha1')

        // Sign the POM file to generate .asc
        signing.sign(pomFile)
    }
    finalizedBy zipLibs
}

tasks.register('zipLibs', Zip) {
    from fileTree(dir: 'build/libs', include: '**/*')
    into "io/github/bibekaryal86/${archivesBaseName}/${version}"
    archiveFileName = "${archivesBaseName}-${version}.zip"
    destinationDirectory = file("${projectDir}")
}

// FINAL TASK TO GENERATE PUBLISH ARTIFACTS
tasks.register('buildAndPublish') {
    dependsOn clean, jar, sourcesJar, javadocJar, publishToMavenLocal, signArchives
    finalizedBy copyAndRenamePom
}
